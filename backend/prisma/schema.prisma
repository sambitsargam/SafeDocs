// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  ENTERPRISE
}

enum DocumentStatus {
  UPLOADING
  UPLOADED
  PENDING_SIGNATURE
  SIGNED
  COMPLETED
  ARCHIVED
  DELETED
}

enum ComplianceLevel {
  STANDARD
  HIPAA
  SOX
  GDPR
  HIGH_SECURITY
}

enum SignatureAlgorithm {
  ECDSA
  RSA
  ED25519
}

enum SigningMethod {
  WALLET_SIGNATURE
  CERTIFICATE_BASED
  BIOMETRIC
}

enum ProofType {
  PDP // Proof of Data Possession
  POR // Proof of Retrievability
  POW // Proof of Work
  POS // Proof of Storage
}

enum AuditAction {
  DOCUMENT_UPLOADED
  DOCUMENT_VIEWED
  DOCUMENT_DOWNLOADED
  DOCUMENT_SIGNED
  DOCUMENT_SHARED
  DOCUMENT_DELETED
  USER_LOGIN
  USER_LOGOUT
  PERMISSION_CHANGED
  COMPLIANCE_CHECK
  PROOF_GENERATED
  PROOF_VERIFIED
}

model User {
  id               String    @id @default(cuid())
  walletAddress    String    @unique
  email            String?   @unique
  displayName      String?
  avatar           String?
  role             UserRole  @default(USER)
  isEmailVerified  Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastLoginAt      DateTime?

  // Relations
  documents        Document[]
  signatures       Signature[]
  auditLogs        AuditLog[]

  @@map("users")
}

model Document {
  id              String          @id @default(cuid())
  title           String
  description     String?
  originalFileName String
  mimeType        String
  fileSize        Int
  documentHash    String          @unique
  encryptedData   String          // Base64 encoded encrypted document
  ipfsCid         String          @unique
  filecoinDealId  String?         @unique
  uploadedBy      String
  status          DocumentStatus  @default(UPLOADING)
  isEncrypted     Boolean         @default(true)
  retentionPeriod Int?            // in days
  complianceLevel ComplianceLevel @default(STANDARD)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  uploader        User            @relation(fields: [uploadedBy], references: [id])
  signatures      Signature[]
  storageProofs   StorageProof[]
  auditLogs       AuditLog[]

  @@map("documents")
}

model Signature {
  id                   String             @id @default(cuid())
  documentId           String
  signerId             String
  signerWalletAddress  String
  signerName           String
  signerEmail          String?
  signatureData        String             // Base64 encoded signature
  signatureAlgorithm   SignatureAlgorithm
  signatureMetadata    Json               // SignatureMetadata as JSON
  timestampSigned      DateTime           @default(now())
  ipLocation           String?
  deviceInfo           String?
  isVerified           Boolean            @default(false)
  verificationProof    String?
  blockchainTxHash     String?

  // Relations
  document             Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  signer               User               @relation(fields: [signerId], references: [id])

  @@map("signatures")
}

model StorageProof {
  id                String    @id @default(cuid())
  documentId        String
  proofType         ProofType
  proofData         String    // Base64 encoded proof data
  blockchainTxHash  String    @unique
  storageProvider   String
  createdAt         DateTime  @default(now())
  expiresAt         DateTime?
  isValid           Boolean   @default(true)
  verificationCount Int       @default(0)
  lastVerifiedAt    DateTime?

  // Relations
  document          Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("storage_proofs")
}

model AuditLog {
  id              String          @id @default(cuid())
  userId          String?
  documentId      String?
  action          AuditAction
  details         Json            // Additional action details
  ipAddress       String
  userAgent       String
  timestamp       DateTime        @default(now())
  complianceLevel ComplianceLevel
  retentionDate   DateTime        // When this log can be deleted

  // Relations
  user            User?           @relation(fields: [userId], references: [id])
  document        Document?       @relation(fields: [documentId], references: [id])

  @@map("audit_logs")
}

// Indexes for performance
model User {
  @@index([walletAddress])
  @@index([email])
  @@index([createdAt])
}

model Document {
  @@index([uploadedBy])
  @@index([status])
  @@index([complianceLevel])
  @@index([createdAt])
  @@index([documentHash])
  @@index([ipfsCid])
}

model Signature {
  @@index([documentId])
  @@index([signerId])
  @@index([timestampSigned])
  @@index([isVerified])
}

model StorageProof {
  @@index([documentId])
  @@index([proofType])
  @@index([isValid])
  @@index([createdAt])
}

model AuditLog {
  @@index([userId])
  @@index([documentId])
  @@index([action])
  @@index([timestamp])
  @@index([complianceLevel])
  @@index([retentionDate])
}