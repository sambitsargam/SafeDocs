// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  ENTERPRISE
}

enum SubscriptionTier {
  FREE
  PROFESSIONAL
  TEAM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  TRIAL
  SUSPENDED
}

enum TeamMemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum DocumentStatus {
  UPLOADING
  UPLOADED
  PENDING_SIGNATURE
  SIGNED
  COMPLETED
  ARCHIVED
  DELETED
}

enum ComplianceLevel {
  STANDARD
  HIPAA
  SOX
  GDPR
  HIGH_SECURITY
}

enum SignatureAlgorithm {
  ECDSA
  RSA
  ED25519
}

enum SigningMethod {
  WALLET_SIGNATURE
  CERTIFICATE_BASED
  BIOMETRIC
}

enum ProofType {
  PDP
  POR
  POW
  POS
}

enum AuditAction {
  DOCUMENT_UPLOADED
  DOCUMENT_VIEWED
  DOCUMENT_DOWNLOADED
  DOCUMENT_SIGNED
  DOCUMENT_SHARED
  DOCUMENT_DELETED
  USER_LOGIN
  USER_LOGOUT
  PERMISSION_CHANGED
  COMPLIANCE_CHECK
  PROOF_GENERATED
  PROOF_VERIFIED
}

enum IndustryType {
  LAW_FIRM
  HEALTHCARE
  FINANCE
  GOVERNMENT
  REAL_ESTATE
  EDUCATION
  OTHER
}

enum PilotStatus {
  PENDING
  APPROVED
  ACTIVE
  COMPLETED
  CANCELLED
  REJECTED
}

enum PilotGoal {
  COST_REDUCTION
  COMPLIANCE_IMPROVEMENT
  WORKFLOW_EFFICIENCY
  SECURITY_ENHANCEMENT
  SCALABILITY_TEST
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum FeedbackCategory {
  EASE_OF_USE
  PERFORMANCE
  FEATURES
  SUPPORT
  COMPLIANCE
  INTEGRATION
  COST_VALUE
  OVERALL
}

enum TemplateType {
  LEGAL_CONTRACT
  PATIENT_CONSENT
  HIPAA_AUTHORIZATION
  NDA
  EMPLOYMENT_AGREEMENT
  REAL_ESTATE_CONTRACT
  FINANCIAL_AGREEMENT
  CUSTOM
}

enum FieldType {
  TEXT
  EMAIL
  PHONE
  DATE
  NUMBER
  SELECT
  MULTISELECT
  TEXTAREA
  CHECKBOX
  SIGNATURE
  FILE_UPLOAD
}

enum WorkflowAction {
  REVIEW
  SIGN
  APPROVE
  VERIFY
  ARCHIVE
  NOTIFY
}


model User {
  id               String    @id @default(cuid())
  walletAddress    String    @unique
  email            String?   @unique
  displayName      String?
  avatar           String?
  role             UserRole  @default(USER)
  isEmailVerified  Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastLoginAt      DateTime?
  teamMemberships  TeamMember[]
  ownedTeams       Team[]    @relation("TeamOwner")
  documents        Document[]
  signatures       Signature[]
  auditLogs        AuditLog[]
  complianceReports ComplianceReport[]
  pilotParticipations PilotParticipant[] @relation("PilotParticipants")

  @@map("users")
  @@index([walletAddress])
  @@index([email])
  @@index([createdAt])
}

model Document {
  id              String          @id @default(cuid())
  title           String
  description     String?
  originalFileName String
  mimeType        String
  fileSize        Int
  documentHash    String          @unique
  encryptedData   String
  ipfsCid         String          @unique
  filecoinDealId  String?         @unique
  uploadedBy      String
  status          DocumentStatus  @default(UPLOADING)
  isEncrypted     Boolean         @default(true)
  retentionPeriod Int?
  complianceLevel ComplianceLevel @default(STANDARD)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  uploader        User            @relation(fields: [uploadedBy], references: [id])
  signatures      Signature[]
  storageProofs   StorageProof[]
  auditLogs       AuditLog[]
  verificationResults VerificationResult[]
  teamShares      TeamDocument[]

  @@map("documents")
  @@index([uploadedBy])
  @@index([status])
  @@index([complianceLevel])
  @@index([createdAt])
  @@index([documentHash])
  @@index([ipfsCid])
}

model Signature {
  id                   String             @id @default(cuid())
  documentId           String
  signerId             String
  signerWalletAddress  String
  signerName           String
  signerEmail          String?
  signatureData        String
  signatureAlgorithm   SignatureAlgorithm
  signatureMetadata    Json
  timestampSigned      DateTime           @default(now())
  ipLocation           String?
  deviceInfo           String?
  isVerified           Boolean            @default(false)
  verificationProof    String?
  blockchainTxHash     String?
  document             Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  signer               User               @relation(fields: [signerId], references: [id])

  @@map("signatures")
  @@index([documentId])
  @@index([signerId])
  @@index([timestampSigned])
  @@index([isVerified])
}

model StorageProof {
  id                String    @id @default(cuid())
  documentId        String
  proofType         ProofType
  proofData         String
  blockchainTxHash  String    @unique
  storageProvider   String
  createdAt         DateTime  @default(now())
  expiresAt         DateTime?
  isValid           Boolean   @default(true)
  verificationCount Int       @default(0)
  lastVerifiedAt    DateTime?
  document          Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("storage_proofs")
  @@index([documentId])
  @@index([proofType])
  @@index([isValid])
  @@index([createdAt])
}

model AuditLog {
  id              String          @id @default(cuid())
  userId          String?
  documentId      String?
  action          AuditAction
  details         Json
  ipAddress       String
  userAgent       String
  timestamp       DateTime        @default(now())
  complianceLevel ComplianceLevel
  retentionDate   DateTime
  user            User?           @relation(fields: [userId], references: [id])
  document        Document?       @relation(fields: [documentId], references: [id])

  @@map("audit_logs")
  @@index([userId])
  @@index([documentId])
  @@index([action])
  @@index([timestamp])
  @@index([complianceLevel])
  @@index([retentionDate])
}

model VerificationResult {
  id                String    @id @default(cuid())
  documentId        String
  verificationLevel String
  isValid           Boolean
  confidence        Int
  checks            Json
  details           Json
  metrics           Json
  anomalies         String[]
  warnings          String[]
  recommendations   String[]
  createdAt         DateTime  @default(now())
  document          Document  @relation(fields: [documentId], references: [id])

  @@map("verification_results")
  @@index([documentId])
  @@index([verificationLevel])
  @@index([isValid])
  @@index([confidence])
  @@index([createdAt])
}

model ComplianceReport {
  id                  String    @id @default(cuid())
  framework           String
  generatedBy         String
  timeRangeStart      DateTime
  timeRangeEnd        DateTime
  summary             Json
  findings            Json
  recommendations     String[]
  certificationStatus String
  reportData          Json
  createdAt           DateTime  @default(now())
  generator           User      @relation(fields: [generatedBy], references: [id])

  @@map("compliance_reports")
  @@index([framework])
  @@index([generatedBy])
  @@index([certificationStatus])
  @@index([createdAt])
}

model Team {
  id              String        @id @default(cuid())
  name            String
  description     String?
  ownerId         String
  subscriptionId  String?       @unique
  settings        Json          @default("{}")
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  owner           User          @relation("TeamOwner", fields: [ownerId], references: [id])
  members         TeamMember[]
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  documents       TeamDocument[]

  @@map("teams")
  @@index([ownerId])
  @@index([subscriptionId])
  @@index([createdAt])
}

model TeamMember {
  id          String         @id @default(cuid())
  teamId      String
  userId      String
  role        TeamMemberRole @default(MEMBER)
  permissions Json           @default("[]")
  invitedBy   String?
  joinedAt    DateTime       @default(now())
  isActive    Boolean        @default(true)
  team        Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
  @@index([teamId])
  @@index([userId])
  @@index([role])
}

model Subscription {
  id           String              @id @default(cuid())
  tier         SubscriptionTier    @default(FREE)
  status       SubscriptionStatus  @default(ACTIVE)
  startDate    DateTime            @default(now())
  endDate      DateTime?
  trialEndDate DateTime?
  billingCycle String              @default("monthly")
  price        Float               @default(0)
  currency     String              @default("USD")
  maxMembers   Int                 @default(1)
  maxDocuments Int                 @default(10)
  maxStorage   BigInt              @default(1073741824)
  features     Json                @default("[]")
  metadata     Json                @default("{}")
  cancelledAt  DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  team         Team?
  invoices     Invoice[]

  @@map("subscriptions")
  @@index([tier])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model Invoice {
  id             String       @id @default(cuid())
  subscriptionId String
  amount         Float
  currency       String       @default("USD")
  status         String       @default("pending")
  dueDate        DateTime
  paidAt         DateTime?
  invoiceNumber  String       @unique
  invoiceUrl     String?
  metadata       Json         @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("invoices")
  @@index([subscriptionId])
  @@index([status])
  @@index([dueDate])
}

model TeamDocument {
  id          String   @id @default(cuid())
  teamId      String
  documentId  String
  sharedBy    String
  permissions Json     @default("[]")
  sharedAt    DateTime @default(now())
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([teamId, documentId])
  @@map("team_documents")
  @@index([teamId])
  @@index([documentId])
}

model PilotProgram {
  id                      String          @id @default(cuid())
  organizationName        String
  industryType            IndustryType
  contactPerson           String
  contactEmail            String
  contactPhone            String?
  companySize             CompanySize
  currentSolution         String?
  estimatedDocumentVolume Int
  status                  PilotStatus     @default(PENDING)
  startDate               DateTime?
  endDate                 DateTime?
  goals                   Json            @default("[]")
  specialRequirements     String?
  complianceNeeds         Json            @default("[]")
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  approvedBy              String?
  approvedAt              DateTime?
  completionReport        String?
  participants            PilotParticipant[]
  feedback                PilotFeedback[]
  analytics               PilotAnalytics[]

  @@map("pilot_programs")
  @@index([industryType])
  @@index([status])
  @@index([companySize])
  @@index([createdAt])
}

model PilotParticipant {
  id              String         @id @default(cuid())
  pilotProgramId  String
  userId          String
  role            String
  department      String?
  joinedAt        DateTime       @default(now())
  isActive        Boolean        @default(true)
  usageStats      Json           @default("{}")
  program         PilotProgram   @relation(fields: [pilotProgramId], references: [id], onDelete: Cascade)
  user            User           @relation("PilotParticipants", fields: [userId], references: [id])
  feedback        PilotFeedback[]

  @@unique([pilotProgramId, userId])
  @@map("pilot_participants")
  @@index([pilotProgramId])
  @@index([userId])
  @@index([isActive])
}

model PilotFeedback {
  id                    String           @id @default(cuid())
  pilotProgramId        String
  participantId         String
  category              FeedbackCategory
  rating                Int
  feedback              String
  suggestedImprovements String?
  wouldRecommend        Boolean          @default(true)
  createdAt             DateTime         @default(now())
  isPublic              Boolean          @default(false)
  program               PilotProgram     @relation(fields: [pilotProgramId], references: [id], onDelete: Cascade)
  participant           PilotParticipant @relation(fields: [participantId], references: [id])

  @@map("pilot_feedback")
  @@index([pilotProgramId])
  @@index([participantId])
  @@index([category])
  @@index([rating])
  @@index([createdAt])
}

model IndustryTemplate {
  id                      String        @id @default(cuid())
  industryType            IndustryType
  name                    String
  description             String
  templateType            TemplateType
  documentFields          Json          @default("[]")
  workflowSteps           Json          @default("[]")
  complianceLevel         ComplianceLevel
  estimatedCompletionTime Int
  isActive                Boolean       @default(true)
  usageCount              Int           @default(0)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@map("industry_templates")
  @@index([industryType])
  @@index([templateType])
  @@index([complianceLevel])
  @@index([isActive])
  @@index([usageCount])
}

model PilotAnalytics {
  id                        String       @id @default(cuid())
  pilotProgramId            String
  totalParticipants         Int          @default(0)
  activeParticipants        Int          @default(0)
  documentsProcessed        Int          @default(0)
  signaturesCompleted       Int          @default(0)
  averageSatisfactionScore  Float        @default(0)
  costSavings               Float        @default(0)
  timeToCompletion          Float        @default(0)
  complianceScore           Float        @default(0)
  issuesReported            Int          @default(0)
  issuesResolved            Int          @default(0)
  periodStart               DateTime
  periodEnd                 DateTime
  createdAt                 DateTime     @default(now())
  program                   PilotProgram @relation(fields: [pilotProgramId], references: [id], onDelete: Cascade)

  @@map("pilot_analytics")
  @@index([pilotProgramId])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([createdAt])
}

