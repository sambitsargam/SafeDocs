// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

damodel AuditLog {
  id               String           @id @default(cuid())
  userId           String?
  documentId       String?
  action           String
  details          String
  ipAddress        String
  userAgent        String
  timestamp        DateTime         @default(now())
  complianceLevel  ComplianceLevel?
  retentionDate    DateTime?

  // Relations
  user     User?     @relation(fields: [userId], references: [id])
  document Document? @relation(fields: [documentId], references: [id])

  @@index([userId])
  @@index([documentId])
  @@index([action])
  @@index([timestamp])
  @@index([complianceLevel])
  @@index([retentionDate])
}

model VerificationResult {
  id                String           @id
  documentId        String
  verificationLevel String // BASIC, STANDARD, ENHANCED, MAXIMUM
  isValid           Boolean
  confidence        Int // 0-100
  checks            Json
  details           Json
  metrics           Json
  anomalies         String[]
  warnings          String[]
  recommendations   String[]
  createdAt         DateTime         @default(now())

  // Relations
  document          Document         @relation(fields: [documentId], references: [id])

  @@index([documentId])
  @@index([verificationLevel])
  @@index([isValid])
  @@index([confidence])
  @@index([createdAt])
}

model ComplianceReport {
  id                String           @id
  framework         String // HIPAA, SOX, GDPR, SOC2, ALL
  generatedBy       String
  timeRangeStart    DateTime
  timeRangeEnd      DateTime
  summary           Json
  findings          Json
  recommendations   String[]
  certificationStatus String // COMPLIANT, NON_COMPLIANT, NEEDS_REVIEW
  reportData        Json
  createdAt         DateTime         @default(now())

  // Relations
  generator         User             @relation(fields: [generatedBy], references: [id])

  @@index([framework])
  @@index([generatedBy])
  @@index([certificationStatus])
  @@index([createdAt])
}ovider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  ENTERPRISE
}

enum SubscriptionTier {
  FREE
  PROFESSIONAL
  TEAM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  TRIAL
  SUSPENDED
}

enum TeamMemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum DocumentStatus {
  UPLOADING
  UPLOADED
  PENDING_SIGNATURE
  SIGNED
  COMPLETED
  ARCHIVED
  DELETED
}

enum ComplianceLevel {
  STANDARD
  HIPAA
  SOX
  GDPR
  HIGH_SECURITY
}

enum SignatureAlgorithm {
  ECDSA
  RSA
  ED25519
}

enum SigningMethod {
  WALLET_SIGNATURE
  CERTIFICATE_BASED
  BIOMETRIC
}

enum ProofType {
  PDP // Proof of Data Possession
  POR // Proof of Retrievability
  POW // Proof of Work
  POS // Proof of Storage
}

enum AuditAction {
  DOCUMENT_UPLOADED
  DOCUMENT_VIEWED
  DOCUMENT_DOWNLOADED
  DOCUMENT_SIGNED
  DOCUMENT_SHARED
  DOCUMENT_DELETED
  USER_LOGIN
  USER_LOGOUT
  PERMISSION_CHANGED
  COMPLIANCE_CHECK
  PROOF_GENERATED
  PROOF_VERIFIED
}

model User {
  id               String    @id @default(cuid())
  walletAddress    String    @unique
  email            String?   @unique
  displayName      String?
  avatar           String?
  role             UserRole  @default(USER)
  isEmailVerified  Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastLoginAt      DateTime?

  // Team relations
  teamMemberships  TeamMember[]
  ownedTeams       Team[]       @relation("TeamOwner")

  // Relations
  documents         Document[]
  signatures        Signature[]
  auditLogs         AuditLog[]
  complianceReports ComplianceReport[]

  @@map("users")
  @@index([walletAddress])
  @@index([email])
  @@index([createdAt])
}

model Document {
  id              String          @id @default(cuid())
  title           String
  description     String?
  originalFileName String
  mimeType        String
  fileSize        Int
  documentHash    String          @unique
  encryptedData   String          // Base64 encoded encrypted document
  ipfsCid         String          @unique
  filecoinDealId  String?         @unique
  uploadedBy      String
  status          DocumentStatus  @default(UPLOADING)
  isEncrypted     Boolean         @default(true)
  retentionPeriod Int?            // in days
  complianceLevel ComplianceLevel @default(STANDARD)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  uploader           User                 @relation(fields: [uploadedBy], references: [id])
  signatures         Signature[]
  storageProofs      StorageProof[]
  auditLogs          AuditLog[]
  verificationResults VerificationResult[]
  teamShares         TeamDocument[]

  @@map("documents")
  @@index([uploadedBy])
  @@index([status])
  @@index([complianceLevel])
  @@index([createdAt])
  @@index([documentHash])
  @@index([ipfsCid])
}

model Signature {
  id                   String             @id @default(cuid())
  documentId           String
  signerId             String
  signerWalletAddress  String
  signerName           String
  signerEmail          String?
  signatureData        String             // Base64 encoded signature
  signatureAlgorithm   SignatureAlgorithm
  signatureMetadata    Json               // SignatureMetadata as JSON
  timestampSigned      DateTime           @default(now())
  ipLocation           String?
  deviceInfo           String?
  isVerified           Boolean            @default(false)
  verificationProof    String?
  blockchainTxHash     String?

  // Relations
  document             Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  signer               User               @relation(fields: [signerId], references: [id])

  @@map("signatures")
}

model StorageProof {
  id                String    @id @default(cuid())
  documentId        String
  proofType         ProofType
  proofData         String    // Base64 encoded proof data
  blockchainTxHash  String    @unique
  storageProvider   String
  createdAt         DateTime  @default(now())
  expiresAt         DateTime?
  isValid           Boolean   @default(true)
  verificationCount Int       @default(0)
  lastVerifiedAt    DateTime?

  // Relations
  document          Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("storage_proofs")
}

model AuditLog {
  id              String          @id @default(cuid())
  userId          String?
  documentId      String?
  action          AuditAction
  details         Json            // Additional action details
  ipAddress       String
  userAgent       String
  timestamp       DateTime        @default(now())
  complianceLevel ComplianceLevel
  retentionDate   DateTime        // When this log can be deleted

  // Relations
  user            User?           @relation(fields: [userId], references: [id])
  document        Document?       @relation(fields: [documentId], references: [id])

  @@map("audit_logs")
  @@index([userId])
  @@index([documentId])
  @@index([action])
  @@index([timestamp])
  @@index([complianceLevel])
  @@index([retentionDate])
}

// Team and Subscription Models
model Team {
  id              String            @id @default(cuid())
  name            String
  description     String?
  ownerId         String
  subscriptionId  String?           @unique
  settings        Json              @default("{}")
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  owner           User              @relation("TeamOwner", fields: [ownerId], references: [id])
  members         TeamMember[]
  subscription    Subscription?     @relation(fields: [subscriptionId], references: [id])
  documents       TeamDocument[]

  @@map("teams")
  @@index([ownerId])
  @@index([subscriptionId])
  @@index([createdAt])
}

model TeamMember {
  id              String            @id @default(cuid())
  teamId          String
  userId          String
  role            TeamMemberRole    @default(MEMBER)
  permissions     Json              @default("[]")
  invitedBy       String?
  joinedAt        DateTime          @default(now())
  isActive        Boolean           @default(true)

  // Relations
  team            Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
  @@index([teamId])
  @@index([userId])
  @@index([role])
}

model Subscription {
  id                String              @id @default(cuid())
  tier              SubscriptionTier    @default(FREE)
  status            SubscriptionStatus  @default(ACTIVE)
  startDate         DateTime            @default(now())
  endDate           DateTime?
  trialEndDate      DateTime?
  billingCycle      String              @default("monthly") // monthly, yearly
  price             Float               @default(0)
  currency          String              @default("USD")
  maxMembers        Int                 @default(1)
  maxDocuments      Int                 @default(10)
  maxStorage        BigInt              @default(1073741824) // 1GB in bytes
  features          Json                @default("[]")
  metadata          Json                @default("{}")
  cancelledAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  team              Team?
  invoices          Invoice[]

  @@map("subscriptions")
  @@index([tier])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model Invoice {
  id              String            @id @default(cuid())
  subscriptionId  String
  amount          Float
  currency        String            @default("USD")
  status          String            @default("pending") // pending, paid, failed, refunded
  dueDate         DateTime
  paidAt          DateTime?
  invoiceNumber   String            @unique
  invoiceUrl      String?
  metadata        Json              @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  subscription    Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("invoices")
  @@index([subscriptionId])
  @@index([status])
  @@index([dueDate])
}

model TeamDocument {
  id              String    @id @default(cuid())
  teamId          String
  documentId      String
  sharedBy        String
  permissions     Json      @default("[]")
  sharedAt        DateTime  @default(now())

  // Relations
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

    @@unique([teamId, documentId])
  @@map("team_documents")
  @@index([teamId])
  @@index([documentId])
}

}

// Indexes for performance
model User {
  @@index([walletAddress])
  @@index([email])
  @@index([createdAt])
}

model Document {
  @@index([uploadedBy])
  @@index([status])
  @@index([complianceLevel])
  @@index([createdAt])
  @@index([documentHash])
  @@index([ipfsCid])
}

model Signature {
  @@index([documentId])
  @@index([signerId])
  @@index([timestampSigned])
  @@index([isVerified])
}

model StorageProof {
  @@index([documentId])
  @@index([proofType])
  @@index([isValid])
  @@index([createdAt])
}

model AuditLog {
  @@index([userId])
  @@index([documentId])
  @@index([action])
  @@index([timestamp])
  @@index([complianceLevel])
  @@index([retentionDate])
}